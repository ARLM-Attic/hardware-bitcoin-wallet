usb_request_tester.c will test a USB device's response to the general USB
requests which must be implemented by all USB devices. It requires libusb-1.0.
Compile it with something like:
gcc -o usb_request_tester usb_request_tester.c -I<path to libusb-1.0 includes> -lusb-1.0
and run it with something like:
sudo ./usb_request_tester

report_tester.c will send and receive various patterns of HID reports to a
USB HID device that implements the stream protocol described
in pic32/usb_hid_stream.c. It also requires libusb-1.0.
Compile it with something like:
gcc -o report_tester report_tester.c -I<path to libusb-1.0 includes> -lusb-1.0
and run it with something like:
sudo ./report_tester

nvm_test.c will test the non-volatile memory interface of the firmware by
doing lots of writes and reads. It requires HIDAPI to be installed as a
shared library.
Compile it with something like:
gcc -o nvm_test nvm_test.c -I<path to HIDAPI includes> -lhidapi -L<path to HIDAPI libraries>

hwb_tester.c is a program which can send and receive packets using USB HID
reports. It requires HIDAPI to be installed as a shared library.
Compile it with something like:
gcc -o hwb_tester hwb_tester.c -I<path to HIDAPI includes> -lhidapi -L<path to HIDAPI libraries>
While running, it will prompt for the names of files containing packets. A few
example files (with extension .bin) are included in this subdirectory.

stream_to_stdout.c will send a string using a USB HID report, then it will
dump the contents of all received reports to stdout. This is useful for some
of the statistics test modes. It requires HIDAPI to be installed as a shared
library.
Compile it with something like:
gcc -o stream_to_stdout stream_to_stdout.c -I<path to HIDAPI includes> -lhidapi -L<path to HIDAPI libraries>
and run it with something like:
./stream_to_stdout S > log.txt
(That will send 'S' to the device and write all received bytes to log.txt.)
