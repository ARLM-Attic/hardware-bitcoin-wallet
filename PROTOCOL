Everything is:
| <type>    | <length> |  <value>
|  1 byte   | 4 bytes  | n bytes

<type> is the command type
<length> is the little-endian length in bytes of <value>
<length> and <value> are the "payload" for a command
<type>, <length> and <value> are a "packet"

commands:

0x00: ping
length can be anything
value can be anything

0x01: acknowledge ping
length can be anything
value can be anything

0x02: return success
length is 0 (if nothing is returned)
...unless something is returned

0x03: return failure
length can be anything
value is an error message

0x04: create new wallet
length is 77
first 4 bytes of value are the little-endian wallet number
next 1 byte of value specifies whether (non-zero) or not (zero) to create a hidden wallet
next 32 bytes of value are the encryption key (use all 00s if there isn't any)
last 40 bytes of value are the wallet name (pad with spaces)
Response: 02 (length 0) or 03

0x05: create new address in wallet
length is 0
Response: 02 (with 4-byte address handle followed by address and pubkey) or 03

0x06: get number of addresses
length is 0
Response: 02 (with little-endian 32-bit number) or 03

0x09: get address and public key
length is 4
value is address handle
Response: 02 (with address followed by pubkey) or 03

0x0A: sign transaction
length is 4 + <transaction data size>
value is address handle then transaction data
In order to calculate transaction fees, the transaction data of all input
transactions is required in addition to the transaction data of the spending
transaction. The full transaction data part of the payload should look like
this:
0x01 | <previous output number 1> | <input transaction 1> |
0x01 | <previous output number 2> | <input transaction 2> |
...
0x01 | <previous output number n> | <input transaction n> |
0x00 | <spending transaction>
where "|" denotes concatenation and <previous output number> is a
little-endian 32-bit number which specifies which output (within the
respective input transaction) the spending transaction spends.
All input transactions should be in their unmodified form. The spending
transaction should be modified for signing, with input scripts replaced
appropriately and a 4-byte hash type tag appended.
Response: 02 (with signature) or 03

0x0B: load (unlock) wallet
length is 36
first 4 bytes of value are the little-endian wallet number
last 32 bytes of value are the encryption key (use all 00s if there isn't any)
Response: 02 (length 0) or 03

0x0C: unload (lock) wallet
length is 0
Response: 02 (length 0) or 03

0x0D: format storage
length is 32
value is the initial persistent entropy pool state - this should be truly
  random with close to 256 bits of entropy
Response: 02 (length 0) or 03

0x0E: change wallet encryption key
length is 32
value is the new encryption key (use all 00s if there isn't any)
Response: 02 (length 0) or 03

0x0F: change wallet name
length is 40
value is the new wallet name
Response: 02 (length 0) or 03

0x10: list wallets
length is 0
Response: 02 (with list of: 4 byte version followed by 40 byte name) or 03

0x11: backup wallet
length is 2
first byte specifies whether encryption is to be done (non-zero = yes, zero = no)
second byte specifies the platform-specific device to send backup seed to
Response: 02 (length 0) or 03

0x12: restore wallet
length is 141
first 4 bytes of value are the little-endian wallet number
next 1 byte of value specifies whether (non-zero) or not (zero) to restore a hidden wallet
next 32 bytes of value are the encryption key (use all 00s if there isn't any)
next 40 bytes of value are the wallet name (pad with spaces)
last 64 bytes of value are the (unencrypted) deterministic address generator seed
Response: 02 (length 0) or 03

Flow control (for AVR only):

Every n bytes, wait for an acknowledge from the other side. An acknowledge
is 0xFF followed by a little-endian u32 with number of bytes you can send
before the next acknowledge (i.e. "n").
Initial n is 16
